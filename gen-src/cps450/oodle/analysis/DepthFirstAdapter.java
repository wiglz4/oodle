/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.analysis;

import java.util.*;
import cps450.oodle.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        {
            List<PClassDef> copy = new ArrayList<PClassDef>(node.getClassDef());
            for(PClassDef e : copy)
            {
                e.apply(this);
            }
        }
        outAStart(node);
    }

    public void inAClassDef(AClassDef node)
    {
        defaultIn(node);
    }

    public void outAClassDef(AClassDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDef(AClassDef node)
    {
        inAClassDef(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getMiddle() != null)
        {
            node.getMiddle().apply(this);
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarDecl());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PMethodDecl> copy = new ArrayList<PMethodDecl>(node.getMethodDecl());
            for(PMethodDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLast() != null)
        {
            node.getLast().apply(this);
        }
        outAClassDef(node);
    }

    public void inAExtends(AExtends node)
    {
        defaultIn(node);
    }

    public void outAExtends(AExtends node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtends(AExtends node)
    {
        inAExtends(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAExtends(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAVarDecl(node);
    }

    public void inAMethodDecl(AMethodDecl node)
    {
        defaultIn(node);
    }

    public void outAMethodDecl(AMethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDecl(AMethodDecl node)
    {
        inAMethodDecl(node);
        if(node.getFirstId() != null)
        {
            node.getFirstId().apply(this);
        }
        {
            List<PArgumentDecl> copy = new ArrayList<PArgumentDecl>(node.getArgumentDecl());
            for(PArgumentDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarDecl());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSecondId() != null)
        {
            node.getSecondId().apply(this);
        }
        outAMethodDecl(node);
    }

    public void inAArgumentDecl(AArgumentDecl node)
    {
        defaultIn(node);
    }

    public void outAArgumentDecl(AArgumentDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentDecl(AArgumentDecl node)
    {
        inAArgumentDecl(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAArgumentDecl(node);
    }

    public void inAIntegerType(AIntegerType node)
    {
        defaultIn(node);
    }

    public void outAIntegerType(AIntegerType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerType(AIntegerType node)
    {
        inAIntegerType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntegerType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIdentifyType(AIdentifyType node)
    {
        defaultIn(node);
    }

    public void outAIdentifyType(AIdentifyType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifyType(AIdentifyType node)
    {
        inAIdentifyType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifyType(node);
    }

    public void inARecursiveType(ARecursiveType node)
    {
        defaultIn(node);
    }

    public void outARecursiveType(ARecursiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecursiveType(ARecursiveType node)
    {
        inARecursiveType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outARecursiveType(node);
    }

    public void inAAssstmtStatement(AAssstmtStatement node)
    {
        defaultIn(node);
    }

    public void outAAssstmtStatement(AAssstmtStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssstmtStatement(AAssstmtStatement node)
    {
        inAAssstmtStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpression());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLast() != null)
        {
            node.getLast().apply(this);
        }
        outAAssstmtStatement(node);
    }

    public void inAIfstmtStatement(AIfstmtStatement node)
    {
        defaultIn(node);
    }

    public void outAIfstmtStatement(AIfstmtStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfstmtStatement(AIfstmtStatement node)
    {
        inAIfstmtStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getTrue());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getFalse());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outAIfstmtStatement(node);
    }

    public void inALpstmtStatement(ALpstmtStatement node)
    {
        defaultIn(node);
    }

    public void outALpstmtStatement(ALpstmtStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALpstmtStatement(ALpstmtStatement node)
    {
        inALpstmtStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outALpstmtStatement(node);
    }

    public void inAClstmtStatement(AClstmtStatement node)
    {
        defaultIn(node);
    }

    public void outAClstmtStatement(AClstmtStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClstmtStatement(AClstmtStatement node)
    {
        inAClstmtStatement(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getRhs());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAClstmtStatement(node);
    }

    public void inAOrExpression(AOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrExpression(AOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpression(AOrExpression node)
    {
        inAOrExpression(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAOrExpression(node);
    }

    public void inAAndExpression(AAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndExpression(AAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpression(AAndExpression node)
    {
        inAAndExpression(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAAndExpression(node);
    }

    public void inAGtExpression(AGtExpression node)
    {
        defaultIn(node);
    }

    public void outAGtExpression(AGtExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExpression(AGtExpression node)
    {
        inAGtExpression(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAGtExpression(node);
    }

    public void inAGteExpression(AGteExpression node)
    {
        defaultIn(node);
    }

    public void outAGteExpression(AGteExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteExpression(AGteExpression node)
    {
        inAGteExpression(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAGteExpression(node);
    }

    public void inAEqExpression(AEqExpression node)
    {
        defaultIn(node);
    }

    public void outAEqExpression(AEqExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExpression(AEqExpression node)
    {
        inAEqExpression(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAEqExpression(node);
    }

    public void inACatExpression(ACatExpression node)
    {
        defaultIn(node);
    }

    public void outACatExpression(ACatExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatExpression(ACatExpression node)
    {
        inACatExpression(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outACatExpression(node);
    }

    public void inASubExpression(ASubExpression node)
    {
        defaultIn(node);
    }

    public void outASubExpression(ASubExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpression(ASubExpression node)
    {
        inASubExpression(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outASubExpression(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAAddExpression(node);
    }

    public void inAMulExpression(AMulExpression node)
    {
        defaultIn(node);
    }

    public void outAMulExpression(AMulExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExpression(AMulExpression node)
    {
        inAMulExpression(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAMulExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outADivExpression(node);
    }

    public void inANotExpression(ANotExpression node)
    {
        defaultIn(node);
    }

    public void outANotExpression(ANotExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpression(ANotExpression node)
    {
        inANotExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANotExpression(node);
    }

    public void inANegExpression(ANegExpression node)
    {
        defaultIn(node);
    }

    public void outANegExpression(ANegExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegExpression(ANegExpression node)
    {
        inANegExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANegExpression(node);
    }

    public void inAPosExpression(APosExpression node)
    {
        defaultIn(node);
    }

    public void outAPosExpression(APosExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosExpression(APosExpression node)
    {
        inAPosExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPosExpression(node);
    }

    public void inACallxprExpression(ACallxprExpression node)
    {
        defaultIn(node);
    }

    public void outACallxprExpression(ACallxprExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallxprExpression(ACallxprExpression node)
    {
        inACallxprExpression(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getRhs());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outACallxprExpression(node);
    }

    public void inAIdExpression(AIdExpression node)
    {
        defaultIn(node);
    }

    public void outAIdExpression(AIdExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExpression(AIdExpression node)
    {
        inAIdExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpression());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAIdExpression(node);
    }

    public void inAStrlitExpression(AStrlitExpression node)
    {
        defaultIn(node);
    }

    public void outAStrlitExpression(AStrlitExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrlitExpression(AStrlitExpression node)
    {
        inAStrlitExpression(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStrlitExpression(node);
    }

    public void inAIntlitExpression(AIntlitExpression node)
    {
        defaultIn(node);
    }

    public void outAIntlitExpression(AIntlitExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntlitExpression(AIntlitExpression node)
    {
        inAIntlitExpression(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntlitExpression(node);
    }

    public void inATrExpression(ATrExpression node)
    {
        defaultIn(node);
    }

    public void outATrExpression(ATrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrExpression(ATrExpression node)
    {
        inATrExpression(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrExpression(node);
    }

    public void inAFlExpression(AFlExpression node)
    {
        defaultIn(node);
    }

    public void outAFlExpression(AFlExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFlExpression(AFlExpression node)
    {
        inAFlExpression(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFlExpression(node);
    }

    public void inANullExpression(ANullExpression node)
    {
        defaultIn(node);
    }

    public void outANullExpression(ANullExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullExpression(ANullExpression node)
    {
        inANullExpression(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullExpression(node);
    }

    public void inAMeExpression(AMeExpression node)
    {
        defaultIn(node);
    }

    public void outAMeExpression(AMeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeExpression(AMeExpression node)
    {
        inAMeExpression(node);
        if(node.getMe() != null)
        {
            node.getMe().apply(this);
        }
        outAMeExpression(node);
    }

    public void inANewtypeExpression(ANewtypeExpression node)
    {
        defaultIn(node);
    }

    public void outANewtypeExpression(ANewtypeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewtypeExpression(ANewtypeExpression node)
    {
        inANewtypeExpression(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outANewtypeExpression(node);
    }

    public void inAParenExpression(AParenExpression node)
    {
        defaultIn(node);
    }

    public void outAParenExpression(AParenExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenExpression(AParenExpression node)
    {
        inAParenExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAParenExpression(node);
    }
}
