/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.parser;

import cps450.oodle.lexer.*;
import cps450.oodle.node.*;
import cps450.oodle.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAstart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAstart3Start */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAstart4Start */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AAstart5Start */
            {
                ArrayList<Object> list = new4();
                push(goTo(0), list);
            }
            break;
            case 5: /* reduce AAstart6Start */
            {
                ArrayList<Object> list = new5();
                push(goTo(0), list);
            }
            break;
            case 6: /* reduce AAstart7Start */
            {
                ArrayList<Object> list = new6();
                push(goTo(0), list);
            }
            break;
            case 7: /* reduce AAstart8Start */
            {
                ArrayList<Object> list = new7();
                push(goTo(0), list);
            }
            break;
            case 8: /* reduce ANewlineclass */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list);
            }
            break;
            case 9: /* reduce AAclassdef1ClassDef */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list);
            }
            break;
            case 10: /* reduce AAclassdef2ClassDef */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list);
            }
            break;
            case 11: /* reduce AAclassdef3ClassDef */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list);
            }
            break;
            case 12: /* reduce AAclassdef4ClassDef */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list);
            }
            break;
            case 13: /* reduce AAclassdef5ClassDef */
            {
                ArrayList<Object> list = new13();
                push(goTo(2), list);
            }
            break;
            case 14: /* reduce AAclassdef6ClassDef */
            {
                ArrayList<Object> list = new14();
                push(goTo(2), list);
            }
            break;
            case 15: /* reduce AAclassdef7ClassDef */
            {
                ArrayList<Object> list = new15();
                push(goTo(2), list);
            }
            break;
            case 16: /* reduce AAclassdef8ClassDef */
            {
                ArrayList<Object> list = new16();
                push(goTo(2), list);
            }
            break;
            case 17: /* reduce AInheriting */
            {
                ArrayList<Object> list = new17();
                push(goTo(3), list);
            }
            break;
            case 18: /* reduce AAvardecl1VarDecl */
            {
                ArrayList<Object> list = new18();
                push(goTo(4), list);
            }
            break;
            case 19: /* reduce AAvardecl2VarDecl */
            {
                ArrayList<Object> list = new19();
                push(goTo(4), list);
            }
            break;
            case 20: /* reduce AAvardecl3VarDecl */
            {
                ArrayList<Object> list = new20();
                push(goTo(4), list);
            }
            break;
            case 21: /* reduce AAvardecl4VarDecl */
            {
                ArrayList<Object> list = new21();
                push(goTo(4), list);
            }
            break;
            case 22: /* reduce AColType */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list);
            }
            break;
            case 23: /* reduce AAssignmentExpression */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list);
            }
            break;
            case 24: /* reduce AAmethoddecl1MethodDecl */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list);
            }
            break;
            case 25: /* reduce AAmethoddecl2MethodDecl */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list);
            }
            break;
            case 26: /* reduce AAmethoddecl3MethodDecl */
            {
                ArrayList<Object> list = new26();
                push(goTo(7), list);
            }
            break;
            case 27: /* reduce AAmethoddecl4MethodDecl */
            {
                ArrayList<Object> list = new27();
                push(goTo(7), list);
            }
            break;
            case 28: /* reduce AAmethoddecl5MethodDecl */
            {
                ArrayList<Object> list = new28();
                push(goTo(7), list);
            }
            break;
            case 29: /* reduce AAmethoddecl6MethodDecl */
            {
                ArrayList<Object> list = new29();
                push(goTo(7), list);
            }
            break;
            case 30: /* reduce AAmethoddecl7MethodDecl */
            {
                ArrayList<Object> list = new30();
                push(goTo(7), list);
            }
            break;
            case 31: /* reduce AAmethoddecl8MethodDecl */
            {
                ArrayList<Object> list = new31();
                push(goTo(7), list);
            }
            break;
            case 32: /* reduce AAargumentdecllist1ArgumentDeclList */
            {
                ArrayList<Object> list = new32();
                push(goTo(8), list);
            }
            break;
            case 33: /* reduce AAargumentdecllist2ArgumentDeclList */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list);
            }
            break;
            case 34: /* reduce AArgumentDeclListSemicolon */
            {
                ArrayList<Object> list = new34();
                push(goTo(9), list);
            }
            break;
            case 35: /* reduce AArgumentDecl */
            {
                ArrayList<Object> list = new35();
                push(goTo(10), list);
            }
            break;
            case 36: /* reduce AIntegerType */
            {
                ArrayList<Object> list = new36();
                push(goTo(11), list);
            }
            break;
            case 37: /* reduce AStringType */
            {
                ArrayList<Object> list = new37();
                push(goTo(11), list);
            }
            break;
            case 38: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new38();
                push(goTo(11), list);
            }
            break;
            case 39: /* reduce AIdentifyType */
            {
                ArrayList<Object> list = new39();
                push(goTo(11), list);
            }
            break;
            case 40: /* reduce AArecursivetype1Type */
            {
                ArrayList<Object> list = new40();
                push(goTo(11), list);
            }
            break;
            case 41: /* reduce AArecursivetype2Type */
            {
                ArrayList<Object> list = new41();
                push(goTo(11), list);
            }
            break;
            case 42: /* reduce AAstatementlist1StatementList */
            {
                ArrayList<Object> list = new42();
                push(goTo(12), list);
            }
            break;
            case 43: /* reduce AAstatementlist2StatementList */
            {
                ArrayList<Object> list = new43();
                push(goTo(12), list);
            }
            break;
            case 44: /* reduce AStatementNl */
            {
                ArrayList<Object> list = new44();
                push(goTo(13), list);
            }
            break;
            case 45: /* reduce AAssstmtStatement */
            {
                ArrayList<Object> list = new45();
                push(goTo(14), list);
            }
            break;
            case 46: /* reduce AIfstmtStatement */
            {
                ArrayList<Object> list = new46();
                push(goTo(14), list);
            }
            break;
            case 47: /* reduce ALpstmtStatement */
            {
                ArrayList<Object> list = new47();
                push(goTo(14), list);
            }
            break;
            case 48: /* reduce AClstmtStatement */
            {
                ArrayList<Object> list = new48();
                push(goTo(14), list);
            }
            break;
            case 49: /* reduce AAassignmentstmt1AssignmentStmt */
            {
                ArrayList<Object> list = new49();
                push(goTo(15), list);
            }
            break;
            case 50: /* reduce AAassignmentstmt2AssignmentStmt */
            {
                ArrayList<Object> list = new50();
                push(goTo(15), list);
            }
            break;
            case 51: /* reduce ABracketExpr */
            {
                ArrayList<Object> list = new51();
                push(goTo(16), list);
            }
            break;
            case 52: /* reduce AAifstmt1IfStmt */
            {
                ArrayList<Object> list = new52();
                push(goTo(17), list);
            }
            break;
            case 53: /* reduce AAifstmt2IfStmt */
            {
                ArrayList<Object> list = new53();
                push(goTo(17), list);
            }
            break;
            case 54: /* reduce AOptionalElse */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list);
            }
            break;
            case 55: /* reduce ALoopStmt */
            {
                ArrayList<Object> list = new55();
                push(goTo(19), list);
            }
            break;
            case 56: /* reduce AAcallstmt1CallStmt */
            {
                ArrayList<Object> list = new56();
                push(goTo(20), list);
            }
            break;
            case 57: /* reduce AAcallstmt2CallStmt */
            {
                ArrayList<Object> list = new57();
                push(goTo(20), list);
            }
            break;
            case 58: /* reduce AAcallstmt3CallStmt */
            {
                ArrayList<Object> list = new58();
                push(goTo(20), list);
            }
            break;
            case 59: /* reduce AAcallstmt4CallStmt */
            {
                ArrayList<Object> list = new59();
                push(goTo(20), list);
            }
            break;
            case 60: /* reduce AExpressionDot */
            {
                ArrayList<Object> list = new60();
                push(goTo(21), list);
            }
            break;
            case 61: /* reduce AExpressionComma */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list);
            }
            break;
            case 62: /* reduce AAexpressionlist1ExpressionList */
            {
                ArrayList<Object> list = new62();
                push(goTo(23), list);
            }
            break;
            case 63: /* reduce AAexpressionlist2ExpressionList */
            {
                ArrayList<Object> list = new63();
                push(goTo(23), list);
            }
            break;
            case 64: /* reduce AExpression */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list);
            }
            break;
            case 65: /* reduce AOrExpressionLvl7 */
            {
                ArrayList<Object> list = new65();
                push(goTo(25), list);
            }
            break;
            case 66: /* reduce APassExpressionLvl7 */
            {
                ArrayList<Object> list = new66();
                push(goTo(25), list);
            }
            break;
            case 67: /* reduce AAndExpressionLvl6 */
            {
                ArrayList<Object> list = new67();
                push(goTo(26), list);
            }
            break;
            case 68: /* reduce APassExpressionLvl6 */
            {
                ArrayList<Object> list = new68();
                push(goTo(26), list);
            }
            break;
            case 69: /* reduce AGtExpressionLvl5 */
            {
                ArrayList<Object> list = new69();
                push(goTo(27), list);
            }
            break;
            case 70: /* reduce AGteExpressionLvl5 */
            {
                ArrayList<Object> list = new70();
                push(goTo(27), list);
            }
            break;
            case 71: /* reduce AEqExpressionLvl5 */
            {
                ArrayList<Object> list = new71();
                push(goTo(27), list);
            }
            break;
            case 72: /* reduce APassExpressionLvl5 */
            {
                ArrayList<Object> list = new72();
                push(goTo(27), list);
            }
            break;
            case 73: /* reduce ACatExpressionLvl4 */
            {
                ArrayList<Object> list = new73();
                push(goTo(28), list);
            }
            break;
            case 74: /* reduce APassExpressionLvl4 */
            {
                ArrayList<Object> list = new74();
                push(goTo(28), list);
            }
            break;
            case 75: /* reduce ASubExpressionLvl3 */
            {
                ArrayList<Object> list = new75();
                push(goTo(29), list);
            }
            break;
            case 76: /* reduce AAddExpressionLvl3 */
            {
                ArrayList<Object> list = new76();
                push(goTo(29), list);
            }
            break;
            case 77: /* reduce APassExpressionLvl3 */
            {
                ArrayList<Object> list = new77();
                push(goTo(29), list);
            }
            break;
            case 78: /* reduce AMulExpressionLvl2 */
            {
                ArrayList<Object> list = new78();
                push(goTo(30), list);
            }
            break;
            case 79: /* reduce ADivExpressionLvl2 */
            {
                ArrayList<Object> list = new79();
                push(goTo(30), list);
            }
            break;
            case 80: /* reduce APassExpressionLvl2 */
            {
                ArrayList<Object> list = new80();
                push(goTo(30), list);
            }
            break;
            case 81: /* reduce ANotExpressionLvl1 */
            {
                ArrayList<Object> list = new81();
                push(goTo(31), list);
            }
            break;
            case 82: /* reduce ANegExpressionLvl1 */
            {
                ArrayList<Object> list = new82();
                push(goTo(31), list);
            }
            break;
            case 83: /* reduce APosExpressionLvl1 */
            {
                ArrayList<Object> list = new83();
                push(goTo(31), list);
            }
            break;
            case 84: /* reduce APassExpressionLvl1 */
            {
                ArrayList<Object> list = new84();
                push(goTo(31), list);
            }
            break;
            case 85: /* reduce AAcallxprexpressionlvl01ExpressionLvl0 */
            {
                ArrayList<Object> list = new85();
                push(goTo(32), list);
            }
            break;
            case 86: /* reduce AAcallxprexpressionlvl02ExpressionLvl0 */
            {
                ArrayList<Object> list = new86();
                push(goTo(32), list);
            }
            break;
            case 87: /* reduce AAcallxprexpressionlvl03ExpressionLvl0 */
            {
                ArrayList<Object> list = new87();
                push(goTo(32), list);
            }
            break;
            case 88: /* reduce AAcallxprexpressionlvl04ExpressionLvl0 */
            {
                ArrayList<Object> list = new88();
                push(goTo(32), list);
            }
            break;
            case 89: /* reduce AAidexpressionlvl01ExpressionLvl0 */
            {
                ArrayList<Object> list = new89();
                push(goTo(32), list);
            }
            break;
            case 90: /* reduce AAidexpressionlvl02ExpressionLvl0 */
            {
                ArrayList<Object> list = new90();
                push(goTo(32), list);
            }
            break;
            case 91: /* reduce AStrlitExpressionLvl0 */
            {
                ArrayList<Object> list = new91();
                push(goTo(32), list);
            }
            break;
            case 92: /* reduce AIntlitExpressionLvl0 */
            {
                ArrayList<Object> list = new92();
                push(goTo(32), list);
            }
            break;
            case 93: /* reduce ATrExpressionLvl0 */
            {
                ArrayList<Object> list = new93();
                push(goTo(32), list);
            }
            break;
            case 94: /* reduce AFlExpressionLvl0 */
            {
                ArrayList<Object> list = new94();
                push(goTo(32), list);
            }
            break;
            case 95: /* reduce ANullExpressionLvl0 */
            {
                ArrayList<Object> list = new95();
                push(goTo(32), list);
            }
            break;
            case 96: /* reduce AMeExpressionLvl0 */
            {
                ArrayList<Object> list = new96();
                push(goTo(32), list);
            }
            break;
            case 97: /* reduce ANewtypeExpressionLvl0 */
            {
                ArrayList<Object> list = new97();
                push(goTo(32), list);
            }
            break;
            case 98: /* reduce AParenExpressionLvl0 */
            {
                ArrayList<Object> list = new98();
                push(goTo(32), list);
            }
            break;
            case 99: /* reduce ATerminal$Newline */
            {
                ArrayList<Object> list = new99();
                push(goTo(33), list);
            }
            break;
            case 100: /* reduce ANonTerminal$Newline */
            {
                ArrayList<Object> list = new100();
                push(goTo(33), list);
            }
            break;
            case 101: /* reduce ATerminal$Newlineclass */
            {
                ArrayList<Object> list = new101();
                push(goTo(34), list);
            }
            break;
            case 102: /* reduce ANonTerminal$Newlineclass */
            {
                ArrayList<Object> list = new102();
                push(goTo(34), list);
            }
            break;
            case 103: /* reduce ATerminal$VarDecl */
            {
                ArrayList<Object> list = new103();
                push(goTo(35), list);
            }
            break;
            case 104: /* reduce ANonTerminal$VarDecl */
            {
                ArrayList<Object> list = new104();
                push(goTo(35), list);
            }
            break;
            case 105: /* reduce ATerminal$MethodDecl */
            {
                ArrayList<Object> list = new105();
                push(goTo(36), list);
            }
            break;
            case 106: /* reduce ANonTerminal$MethodDecl */
            {
                ArrayList<Object> list = new106();
                push(goTo(36), list);
            }
            break;
            case 107: /* reduce ATerminal$ArgumentDeclListSemicolon */
            {
                ArrayList<Object> list = new107();
                push(goTo(37), list);
            }
            break;
            case 108: /* reduce ANonTerminal$ArgumentDeclListSemicolon */
            {
                ArrayList<Object> list = new108();
                push(goTo(37), list);
            }
            break;
            case 109: /* reduce ATerminal$StatementNl */
            {
                ArrayList<Object> list = new109();
                push(goTo(38), list);
            }
            break;
            case 110: /* reduce ANonTerminal$StatementNl */
            {
                ArrayList<Object> list = new110();
                push(goTo(38), list);
            }
            break;
            case 111: /* reduce ATerminal$BracketExpr */
            {
                ArrayList<Object> list = new111();
                push(goTo(39), list);
            }
            break;
            case 112: /* reduce ANonTerminal$BracketExpr */
            {
                ArrayList<Object> list = new112();
                push(goTo(39), list);
            }
            break;
            case 113: /* reduce ATerminal$ExpressionComma */
            {
                ArrayList<Object> list = new113();
                push(goTo(40), list);
            }
            break;
            case 114: /* reduce ANonTerminal$ExpressionComma */
            {
                ArrayList<Object> list = new114();
                push(goTo(40), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        pclassdefNode2 = (PClassDef)nodeArrayList1.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode3.add(pclassdefNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        pclassdefNode2 = (PClassDef)nodeArrayList2.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode3.add(pclassdefNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAstart3Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdefNode2 = (PClassDef)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode4.add(pclassdefNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAstart4Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdefNode2 = (PClassDef)nodeArrayList2.get(0);
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode4.add(pclassdefNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAstart5Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        pclassdefNode2 = (PClassDef)nodeArrayList1.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode3.add(pclassdefNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAstart6Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        pclassdefNode2 = (PClassDef)nodeArrayList2.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode3.add(pclassdefNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAstart7Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdefNode2 = (PClassDef)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode4.add(pclassdefNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAstart8Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdefNode2 = (PClassDef)nodeArrayList2.get(0);
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode4.add(pclassdefNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ANewlineclass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        pclassdefNode1 = (PClassDef)nodeArrayList2.get(0);
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAclassdef1ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TIdentifier tidentifierNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidentifierNode6 = (TIdentifier)nodeArrayList6.get(0);

        pclassdefNode1 = new AClassDef(tidentifierNode2, null, listNode4, listNode5, tidentifierNode6);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAclassdef2ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExtends pextendsNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TIdentifier tidentifierNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pextendsNode3 = (PExtends)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidentifierNode6 = (TIdentifier)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidentifierNode2, pextendsNode3, listNode4, listNode5, tidentifierNode6);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAclassdef3ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidentifierNode2, null, listNode5, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAclassdef4ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExtends pextendsNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pextendsNode3 = (PExtends)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidentifierNode2, pextendsNode3, listNode5, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAclassdef5ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidentifierNode2, null, listNode4, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAclassdef6ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExtends pextendsNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pextendsNode3 = (PExtends)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidentifierNode2, pextendsNode3, listNode4, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAclassdef7ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidentifierNode2, null, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAclassdef8ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExtends pextendsNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pextendsNode3 = (PExtends)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList9.get(0);

        pclassdefNode1 = new AClassDef(tidentifierNode2, pextendsNode3, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AInheriting */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExtends pextendsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        pextendsNode1 = new AExtends(tidentifierNode2);
        }
	nodeList.add(pextendsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAvardecl1VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, null, null);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAvardecl2VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, ptypeNode3, null);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAvardecl3VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, null, pexpressionNode4);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAvardecl4VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, ptypeNode3, pexpressionNode4);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AColType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        ptypeNode1 = (PType)nodeArrayList2.get(0);
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAssignmentExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAmethoddecl1MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, null, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAmethoddecl2MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, null, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAmethoddecl3MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PType ptypeNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, ptypeNode4, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAmethoddecl4MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PType ptypeNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList10.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, ptypeNode5, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAmethoddecl5MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, null, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAmethoddecl6MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TIdentifier tidentifierNode10;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList10.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidentifierNode10 = (TIdentifier)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, null, listNode7, listNode9, tidentifierNode10);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAmethoddecl7MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PType ptypeNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList10.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, ptypeNode4, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAmethoddecl8MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PType ptypeNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TIdentifier tidentifierNode10;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList11.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidentifierNode10 = (TIdentifier)nodeArrayList13.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, ptypeNode5, listNode7, listNode9, tidentifierNode10);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAargumentdecllist1ArgumentDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgumentDecl pargumentdeclNode1;
        pargumentdeclNode1 = (PArgumentDecl)nodeArrayList1.get(0);
	if(pargumentdeclNode1 != null)
	{
	  listNode2.add(pargumentdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAargumentdecllist2ArgumentDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgumentDecl pargumentdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentdeclNode2 = (PArgumentDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentdeclNode2 != null)
	{
	  listNode3.add(pargumentdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AArgumentDeclListSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentDecl pargumentdeclNode1;
        pargumentdeclNode1 = (PArgumentDecl)nodeArrayList1.get(0);
	nodeList.add(pargumentdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AArgumentDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentDecl pargumentdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pargumentdeclNode1 = new AArgumentDecl(tidentifierNode2, ptypeNode3);
        }
	nodeList.add(pargumentdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIntegerType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntegerType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AIdentifyType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ptypeNode1 = new AIdentifyType(tidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AArecursivetype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        ptypeNode1 = new ARecursiveType(ptypeNode2, null);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AArecursivetype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        PExpression pexpressionNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        ptypeNode1 = new ARecursiveType(ptypeNode2, pexpressionNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAstatementlist1StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAstatementlist2StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AStatementNl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAssstmtStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AIfstmtStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ALpstmtStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AClstmtStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAassignmentstmt1AssignmentStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssstmtStatement(tidentifierNode2, listNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAassignmentstmt2AssignmentStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExpression pexpressionNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssstmtStatement(tidentifierNode2, listNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ABracketExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAifstmt1IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pstatementNode1 = new AIfstmtStatement(pexpressionNode2, listNode4, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAifstmt2IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new AIfstmtStatement(pexpressionNode2, listNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AOptionalElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ALoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new ALpstmtStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAcallstmt1CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pstatementNode1 = new AClstmtStatement(null, tidentifierNode3, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAcallstmt2CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }

        pstatementNode1 = new AClstmtStatement(pexpressionNode2, tidentifierNode3, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAcallstmt3CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new AClstmtStatement(null, tidentifierNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAcallstmt4CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new AClstmtStatement(pexpressionNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AExpressionDot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AExpressionComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAexpressionlist1ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAexpressionlist2ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AOrExpressionLvl7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AOrExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce APassExpressionLvl7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAndExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAndExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce APassExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AGtExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AGtExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AGteExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AGteExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AEqExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AEqExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce APassExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ACatExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ACatExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce APassExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ASubExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAddExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAddExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce APassExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AMulExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMulExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ADivExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce APassExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANotExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANotExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANegExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANegExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce APosExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new APosExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce APassExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AAcallxprexpressionlvl01ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpressionNode1 = new ACallxprExpression(null, tidentifierNode3, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AAcallxprexpressionlvl02ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }

        pexpressionNode1 = new ACallxprExpression(pexpressionNode2, tidentifierNode3, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AAcallxprexpressionlvl03ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new ACallxprExpression(null, tidentifierNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AAcallxprexpressionlvl04ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new ACallxprExpression(pexpressionNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AAidexpressionlvl01ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpressionNode1 = new AIdExpression(tidentifierNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AAidexpressionlvl02ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new AIdExpression(tidentifierNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AStrlitExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pexpressionNode1 = new AStrlitExpression(tstringliteralNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AIntlitExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIntegerLiteral tintegerliteralNode2;
        tintegerliteralNode2 = (TIntegerLiteral)nodeArrayList1.get(0);

        pexpressionNode1 = new AIntlitExpression(tintegerliteralNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ATrExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpressionNode1 = new ATrExpression(ttrueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AFlExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpressionNode1 = new AFlExpression(tfalseNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ANullExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        pexpressionNode1 = new ANullExpression(tnullNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AMeExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TMe tmeNode2;
        tmeNode2 = (TMe)nodeArrayList1.get(0);

        pexpressionNode1 = new AMeExpression(tmeNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ANewtypeExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList2.get(0);

        pexpressionNode1 = new ANewtypeExpression(ptypeNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AParenExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ATerminal$Newline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TNewline tnewlineNode1;
        tnewlineNode1 = (TNewline)nodeArrayList1.get(0);
	if(tnewlineNode1 != null)
	{
	  listNode2.add(tnewlineNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ANonTerminal$Newline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TNewline tnewlineNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tnewlineNode2 = (TNewline)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tnewlineNode2 != null)
	{
	  listNode3.add(tnewlineNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ATerminal$Newlineclass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode1;
        pclassdefNode1 = (PClassDef)nodeArrayList1.get(0);
	if(pclassdefNode1 != null)
	{
	  listNode2.add(pclassdefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ANonTerminal$Newlineclass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PClassDef pclassdefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdefNode2 = (PClassDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdefNode2 != null)
	{
	  listNode3.add(pclassdefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ATerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ANonTerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ATerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethodDecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethodDecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ANonTerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethodDecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethodDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ATerminal$ArgumentDeclListSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgumentDecl pargumentdeclNode1;
        pargumentdeclNode1 = (PArgumentDecl)nodeArrayList1.get(0);
	if(pargumentdeclNode1 != null)
	{
	  listNode2.add(pargumentdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ANonTerminal$ArgumentDeclListSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgumentDecl pargumentdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentdeclNode2 = (PArgumentDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentdeclNode2 != null)
	{
	  listNode3.add(pargumentdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ATerminal$StatementNl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ANonTerminal$StatementNl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ATerminal$BracketExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ANonTerminal$BracketExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ATerminal$ExpressionComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ANonTerminal$ExpressionComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {7, SHIFT, 2}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 2}, {44, SHIFT, 6}, },
			{{-1, ERROR, 3}, {46, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 5}, {0, SHIFT, 10}, {7, SHIFT, 2}, },
			{{-1, ERROR, 6}, {13, SHIFT, 12}, {15, SHIFT, 13}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 10}, {7, SHIFT, 2}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, },
			{{-1, ERROR, 12}, {11, SHIFT, 20}, },
			{{-1, ERROR, 13}, {0, SHIFT, 1}, },
			{{-1, ERROR, 14}, {15, SHIFT, 22}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 10}, {7, SHIFT, 2}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 10}, {7, SHIFT, 2}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 1}, },
			{{-1, ERROR, 20}, {44, SHIFT, 24}, },
			{{-1, ERROR, 21}, {0, SHIFT, 10}, {9, SHIFT, 25}, {44, SHIFT, 26}, },
			{{-1, ERROR, 22}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 7}, {0, SHIFT, 10}, {7, SHIFT, 2}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 25}, {44, SHIFT, 32}, },
			{{-1, ERROR, 26}, {0, SHIFT, 1}, {35, SHIFT, 33}, {36, SHIFT, 34}, {42, SHIFT, 35}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 29}, {9, SHIFT, 39}, {44, SHIFT, 26}, },
			{{-1, ERROR, 30}, {9, SHIFT, 42}, {44, SHIFT, 43}, },
			{{-1, ERROR, 31}, {0, SHIFT, 10}, {9, SHIFT, 45}, {44, SHIFT, 26}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 33}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 34}, {37, SHIFT, 70}, {44, SHIFT, 71}, },
			{{-1, ERROR, 35}, {5, SHIFT, 76}, {14, SHIFT, 77}, {21, SHIFT, 78}, {44, SHIFT, 79}, },
			{{-1, ERROR, 36}, {0, SHIFT, 1}, {35, SHIFT, 33}, },
			{{-1, ERROR, 37}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 18}, {0, SHIFT, 10}, },
			{{-1, ERROR, 39}, {44, SHIFT, 84}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 41}, {9, SHIFT, 85}, {44, SHIFT, 43}, },
			{{-1, ERROR, 42}, {44, SHIFT, 86}, },
			{{-1, ERROR, 43}, {36, SHIFT, 34}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 45}, {44, SHIFT, 87}, },
			{{-1, ERROR, 46}, {9, SHIFT, 88}, {44, SHIFT, 26}, },
			{{-1, ERROR, 47}, {9, SHIFT, 90}, {44, SHIFT, 43}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 52}, {5, SHIFT, 76}, {14, SHIFT, 77}, {21, SHIFT, 78}, {44, SHIFT, 79}, },
			{{-1, ERROR, 53}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 56}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 57}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 58}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 89}, {36, SHIFT, 96}, {38, SHIFT, 97}, },
			{{-1, ERROR, 60}, {44, SHIFT, 100}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 64}, {26, SHIFT, 101}, },
			{{-1, REDUCE, 66}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 72}, {27, SHIFT, 103}, {32, SHIFT, 104}, {33, SHIFT, 105}, {34, SHIFT, 106}, },
			{{-1, REDUCE, 74}, {28, SHIFT, 107}, {29, SHIFT, 108}, },
			{{-1, REDUCE, 77}, {30, SHIFT, 109}, {31, SHIFT, 110}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 84}, {43, SHIFT, 111}, },
			{{-1, ERROR, 70}, {15, SHIFT, 112}, {42, SHIFT, 35}, },
			{{-1, ERROR, 71}, {42, SHIFT, 35}, },
			{{-1, ERROR, 72}, {37, SHIFT, 115}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 32}, {41, SHIFT, 116}, },
			{{-1, ERROR, 75}, {44, SHIFT, 71}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 22}, {38, SHIFT, 119}, },
			{{-1, ERROR, 81}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 20}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 85}, {44, SHIFT, 121}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 88}, {44, SHIFT, 122}, },
			{{-1, ERROR, 89}, {9, SHIFT, 123}, {44, SHIFT, 43}, },
			{{-1, ERROR, 90}, {44, SHIFT, 124}, },
			{{-1, REDUCE, 97}, {38, SHIFT, 119}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 83}, {43, SHIFT, 111}, },
			{{-1, REDUCE, 82}, {43, SHIFT, 111}, },
			{{-1, ERROR, 95}, {37, SHIFT, 125}, },
			{{-1, ERROR, 96}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {37, SHIFT, 126}, {44, SHIFT, 59}, },
			{{-1, ERROR, 97}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 90}, {38, SHIFT, 97}, },
			{{-1, ERROR, 100}, {36, SHIFT, 133}, },
			{{-1, ERROR, 101}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 102}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 103}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 104}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 105}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 106}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 107}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 108}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 109}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 110}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 112}, {0, SHIFT, 1}, },
			{{-1, ERROR, 113}, {15, SHIFT, 145}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 115}, {15, SHIFT, 146}, {42, SHIFT, 35}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 33}, {41, SHIFT, 116}, },
			{{-1, ERROR, 119}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {39, SHIFT, 148}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 21}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 123}, {44, SHIFT, 150}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 128}, {37, SHIFT, 151}, },
			{{-1, REDUCE, 62}, {40, SHIFT, 152}, },
			{{-1, ERROR, 130}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 131}, {39, SHIFT, 155}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 133}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {37, SHIFT, 156}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 65}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 73}, {28, SHIFT, 107}, {29, SHIFT, 108}, },
			{{-1, REDUCE, 69}, {27, SHIFT, 103}, },
			{{-1, REDUCE, 70}, {27, SHIFT, 103}, },
			{{-1, REDUCE, 71}, {27, SHIFT, 103}, },
			{{-1, REDUCE, 76}, {30, SHIFT, 109}, {31, SHIFT, 110}, },
			{{-1, REDUCE, 75}, {30, SHIFT, 109}, {31, SHIFT, 110}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 144}, {0, SHIFT, 10}, {6, SHIFT, 158}, {44, SHIFT, 159}, },
			{{-1, ERROR, 145}, {0, SHIFT, 1}, },
			{{-1, ERROR, 146}, {0, SHIFT, 1}, },
			{{-1, ERROR, 147}, {15, SHIFT, 163}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 149}, {39, SHIFT, 164}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 63}, {40, SHIFT, 152}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 157}, {37, SHIFT, 165}, },
			{{-1, ERROR, 158}, {0, SHIFT, 1}, },
			{{-1, ERROR, 159}, {0, SHIFT, 1}, {35, SHIFT, 33}, {42, SHIFT, 35}, },
			{{-1, ERROR, 160}, {6, SHIFT, 167}, {44, SHIFT, 159}, },
			{{-1, ERROR, 161}, {0, SHIFT, 10}, {6, SHIFT, 168}, {44, SHIFT, 159}, },
			{{-1, ERROR, 162}, {0, SHIFT, 10}, {6, SHIFT, 170}, {44, SHIFT, 159}, },
			{{-1, ERROR, 163}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 10}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, ERROR, 167}, {0, SHIFT, 1}, },
			{{-1, ERROR, 168}, {0, SHIFT, 1}, },
			{{-1, ERROR, 169}, {6, SHIFT, 188}, {44, SHIFT, 159}, },
			{{-1, ERROR, 170}, {0, SHIFT, 1}, },
			{{-1, ERROR, 171}, {6, SHIFT, 190}, {44, SHIFT, 159}, },
			{{-1, ERROR, 172}, {0, SHIFT, 10}, {6, SHIFT, 191}, {44, SHIFT, 159}, },
			{{-1, ERROR, 173}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 174}, {24, SHIFT, 194}, },
			{{-1, REDUCE, 89}, {35, SHIFT, 195}, {36, SHIFT, 196}, {38, SHIFT, 97}, },
			{{-1, ERROR, 176}, {9, SHIFT, 198}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 178}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 183}, {44, SHIFT, 200}, },
			{{-1, ERROR, 184}, {43, SHIFT, 111}, },
			{{-1, REDUCE, 43}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 10}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 10}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, ERROR, 188}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 10}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, ERROR, 190}, {0, SHIFT, 1}, },
			{{-1, ERROR, 191}, {0, SHIFT, 1}, },
			{{-1, ERROR, 192}, {6, SHIFT, 208}, {44, SHIFT, 159}, },
			{{-1, ERROR, 193}, {22, SHIFT, 209}, },
			{{-1, ERROR, 194}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 195}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 196}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {37, SHIFT, 212}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 90}, {35, SHIFT, 214}, {38, SHIFT, 97}, },
			{{-1, ERROR, 198}, {44, SHIFT, 215}, },
			{{-1, REDUCE, 44}, {0, SHIFT, 10}, },
			{{-1, ERROR, 200}, {36, SHIFT, 216}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 202}, {9, SHIFT, 217}, },
			{{-1, ERROR, 203}, {9, SHIFT, 218}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 10}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, ERROR, 205}, {9, SHIFT, 220}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 10}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 10}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, ERROR, 208}, {0, SHIFT, 1}, },
			{{-1, ERROR, 209}, {0, SHIFT, 1}, },
			{{-1, ERROR, 210}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 56}, {43, REDUCE, 85}, },
			{{-1, ERROR, 213}, {37, SHIFT, 226}, },
			{{-1, ERROR, 214}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 215}, {0, SHIFT, 1}, },
			{{-1, ERROR, 216}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {17, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {23, SHIFT, 55}, {28, SHIFT, 56}, {29, SHIFT, 57}, {36, SHIFT, 58}, {37, SHIFT, 229}, {44, SHIFT, 59}, },
			{{-1, ERROR, 217}, {44, SHIFT, 231}, },
			{{-1, ERROR, 218}, {44, SHIFT, 232}, },
			{{-1, ERROR, 219}, {9, SHIFT, 233}, },
			{{-1, ERROR, 220}, {44, SHIFT, 234}, },
			{{-1, ERROR, 221}, {9, SHIFT, 235}, },
			{{-1, ERROR, 222}, {9, SHIFT, 236}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 10}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 10}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 10}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, REDUCE, 58}, {43, REDUCE, 87}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 24}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 57}, {43, REDUCE, 86}, },
			{{-1, ERROR, 230}, {37, SHIFT, 240}, },
			{{-1, ERROR, 231}, {0, SHIFT, 1}, },
			{{-1, ERROR, 232}, {0, SHIFT, 1}, },
			{{-1, ERROR, 233}, {44, SHIFT, 243}, },
			{{-1, ERROR, 234}, {0, SHIFT, 1}, },
			{{-1, ERROR, 235}, {44, SHIFT, 245}, },
			{{-1, ERROR, 236}, {44, SHIFT, 246}, },
			{{-1, ERROR, 237}, {9, SHIFT, 247}, },
			{{-1, ERROR, 238}, {8, SHIFT, 248}, {9, SHIFT, 249}, },
			{{-1, ERROR, 239}, {9, SHIFT, 251}, },
			{{-1, REDUCE, 59}, {43, REDUCE, 88}, },
			{{-1, REDUCE, 28}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 26}, {0, SHIFT, 10}, },
			{{-1, ERROR, 243}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 25}, {0, SHIFT, 10}, },
			{{-1, ERROR, 245}, {0, SHIFT, 1}, },
			{{-1, ERROR, 246}, {0, SHIFT, 1}, },
			{{-1, ERROR, 247}, {44, SHIFT, 255}, },
			{{-1, ERROR, 248}, {0, SHIFT, 1}, },
			{{-1, ERROR, 249}, {12, SHIFT, 257}, },
			{{-1, ERROR, 250}, {9, SHIFT, 258}, },
			{{-1, ERROR, 251}, {16, SHIFT, 259}, },
			{{-1, REDUCE, 30}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 29}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 27}, {0, SHIFT, 10}, },
			{{-1, ERROR, 255}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 10}, {1, SHIFT, 48}, {2, SHIFT, 49}, {10, SHIFT, 50}, {12, SHIFT, 173}, {16, SHIFT, 174}, {17, SHIFT, 51}, {18, SHIFT, 52}, {20, SHIFT, 54}, {23, SHIFT, 55}, {36, SHIFT, 58}, {44, SHIFT, 175}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 258}, {12, SHIFT, 262}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 31}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 53}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 7}, {9, 16}, {19, 16}, },
			{{-1, 15}, {0, 4}, {5, 11}, },
			{{-1, 14}, },
			{{-1, 27}, {29, 40}, {46, 40}, {160, 40}, {169, 40}, {171, 40}, {192, 40}, },
			{{-1, 36}, {70, 113}, {71, 114}, {115, 147}, },
			{{-1, 37}, {36, 81}, },
			{{-1, 28}, {30, 44}, {41, 44}, {47, 44}, {89, 44}, },
			{{-1, 72}, },
			{{-1, 73}, {75, 117}, },
			{{-1, 74}, {75, 118}, },
			{{-1, 80}, {52, 91}, },
			{{-1, 176}, {186, 202}, {187, 203}, {189, 205}, {204, 219}, {206, 221}, {207, 222}, {223, 237}, {224, 238}, {225, 239}, {256, 261}, },
			{{-1, 177}, {185, 201}, },
			{{-1, 178}, },
			{{-1, 179}, },
			{{-1, 98}, {99, 132}, {197, 132}, },
			{{-1, 180}, },
			{{-1, 250}, },
			{{-1, 181}, },
			{{-1, 182}, },
			{{-1, 60}, {166, 183}, {185, 183}, {186, 183}, {187, 183}, {189, 183}, {204, 183}, {206, 183}, {207, 183}, {223, 183}, {224, 183}, {225, 183}, {256, 183}, },
			{{-1, 127}, {130, 153}, },
			{{-1, 128}, {133, 157}, {196, 213}, {216, 230}, },
			{{-1, 129}, {33, 61}, {58, 95}, {97, 131}, {119, 149}, {130, 154}, {173, 193}, {194, 210}, {195, 211}, {214, 227}, },
			{{-1, 62}, },
			{{-1, 63}, {101, 134}, },
			{{-1, 64}, {102, 135}, },
			{{-1, 65}, {104, 137}, {105, 138}, {106, 139}, },
			{{-1, 66}, {103, 136}, },
			{{-1, 67}, {107, 140}, {108, 141}, },
			{{-1, 68}, {53, 92}, {109, 142}, {110, 143}, },
			{{-1, 69}, {56, 93}, {57, 94}, {166, 184}, {185, 184}, {186, 184}, {187, 184}, {189, 184}, {204, 184}, {206, 184}, {207, 184}, {223, 184}, {224, 184}, {225, 184}, {256, 184}, },
			{{-1, 38}, {0, 5}, {4, 8}, {9, 17}, {11, 18}, {13, 21}, {19, 23}, {22, 31}, {36, 82}, {37, 83}, {81, 120}, {112, 144}, {145, 161}, {146, 162}, {158, 166}, {163, 172}, {167, 186}, {168, 187}, {170, 189}, {178, 199}, {188, 204}, {190, 206}, {191, 207}, {208, 223}, {209, 224}, {210, 225}, {215, 228}, {231, 241}, {232, 242}, {234, 244}, {243, 252}, {245, 253}, {246, 254}, {248, 256}, {255, 260}, },
			{{-1, 9}, {11, 19}, },
			{{-1, 29}, {31, 46}, {144, 160}, {161, 169}, {162, 171}, {172, 192}, },
			{{-1, 30}, {29, 41}, {31, 47}, {46, 89}, },
			{{-1, 75}, },
			{{-1, 185}, },
			{{-1, 99}, {175, 197}, },
			{{-1, 130}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: newline, 'class'",
			"expecting: newline, integer literal, string literal, 'begin', 'class', 'else', 'end', 'false', 'if', 'loop', 'me', 'new', 'null', 'true', '(', identifier, EOF",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: newline, EOF",
			"expecting: 'inherits', 'is'",
			"expecting: newline, 'class', EOF",
			"expecting: 'from'",
			"expecting: newline",
			"expecting: 'is'",
			"expecting: newline, 'end', identifier",
			"expecting: newline, ':=', '(', ':'",
			"expecting: 'begin', 'end', identifier",
			"expecting: 'end', identifier",
			"expecting: integer literal, string literal, 'false', 'me', 'new', 'not', 'null', 'true', '+', '-', '(', identifier",
			"expecting: ')', identifier",
			"expecting: 'boolean', 'int', 'string', identifier",
			"expecting: newline, ':='",
			"expecting: newline, 'begin', 'end', identifier",
			"expecting: '('",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', ')', ']', ',', '.'",
			"expecting: integer literal, string literal, 'false', 'me', 'new', 'null', 'true', '(', identifier",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', '(', ')', '[', ']', ',', '.'",
			"expecting: newline, 'then', 'or', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', '&', '>', '>=', '=', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '>', '>=', '=', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', ')', ']', ','",
			"expecting: 'is', ':'",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: newline, 'is', 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', ':=', ')', '[', ']', ',', ';', '.'",
			"expecting: newline, 'is', ':=', ')', '[', ';'",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', ')', '[', ']', ',', '.'",
			"expecting: integer literal, string literal, 'false', 'me', 'new', 'not', 'null', 'true', '+', '-', '(', ')', identifier",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', ':=', ')', '[', ']', ',', '.'",
			"expecting: integer literal, string literal, 'false', 'me', 'new', 'not', 'null', 'true', '+', '-', '(', ']', identifier",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: newline, 'then', 'and', 'or', '&', ')', ']', ','",
			"expecting: newline, 'begin', identifier",
			"expecting: newline, ':=', ':'",
			"expecting: 'begin', identifier",
			"expecting: newline, integer literal, string literal, 'end', 'false', 'if', 'loop', 'me', 'new', 'null', 'true', '(', identifier",
			"expecting: 'while'",
			"expecting: ':=', '(', '[', '.'",
			"expecting: 'end'",
			"expecting: integer literal, string literal, 'else', 'end', 'false', 'if', 'loop', 'me', 'new', 'null', 'true', '(', identifier",
			"expecting: '.'",
			"expecting: 'then'",
			"expecting: ':=', '[', '.'",
			"expecting: newline, integer literal, string literal, 'else', 'end', 'false', 'if', 'loop', 'me', 'new', 'null', 'true', '(', identifier",
			"expecting: newline, '.'",
			"expecting: 'else', 'end'",
			"expecting: 'if'",
			"expecting: 'loop'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 0, 5, 4, 6, 4, 1, 4, 7, 8, 9, 4, 4, 6, 6, 4, 2, 10, 8, 6, 9, 2, 11, 12, 13, 13, 13, 10, 4, 14, 15, 16, 17, 8, 18, 2, 12, 13, 2, 19, 13, 2, 13, 13, 20, 20, 20, 20, 16, 14, 20, 20, 21, 21, 14, 22, 2, 8, 23, 24, 24, 25, 26, 27, 27, 20, 28, 29, 30, 2, 31, 2, 32, 32, 32, 32, 33, 8, 18, 18, 4, 2, 4, 4, 2, 13, 2, 34, 27, 20, 20, 30, 35, 14, 36, 34, 19, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 2, 8, 9, 31, 28, 2, 2, 31, 37, 18, 4, 4, 2, 4, 20, 20, 14, 30, 38, 14, 39, 36, 35, 24, 24, 26, 40, 40, 40, 27, 27, 27, 27, 41, 8, 8, 9, 32, 39, 4, 20, 14, 14, 38, 36, 20, 30, 8, 42, 43, 41, 41, 8, 32, 20, 44, 8, 8, 43, 8, 43, 41, 14, 45, 46, 47, 48, 8, 8, 8, 8, 8, 2, 49, 48, 44, 44, 8, 44, 8, 8, 43, 50, 14, 14, 35, 51, 2, 52, 19, 48, 47, 47, 44, 47, 44, 44, 8, 8, 8, 8, 53, 30, 14, 8, 35, 2, 2, 47, 2, 47, 47, 44, 52, 44, 53, 8, 10, 53, 30, 8, 8, 2, 8, 2, 2, 47, 54, 47, 53, 10, 10, 8, 10, 8, 8, 2, 8, 55, 47, 56, 10, 10, 10, 8, 44, 8, 55, 8, 10, 47, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
