/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AClassDef extends PClassDef
{
    private TIdentifier _first_;
    private PExtends _middle_;
    private final LinkedList<PVarDecl> _varDecl_ = new LinkedList<PVarDecl>();
    private final LinkedList<PMethodDecl> _methodDecl_ = new LinkedList<PMethodDecl>();
    private TIdentifier _last_;

    public AClassDef()
    {
        // Constructor
    }

    public AClassDef(
        @SuppressWarnings("hiding") TIdentifier _first_,
        @SuppressWarnings("hiding") PExtends _middle_,
        @SuppressWarnings("hiding") List<?> _varDecl_,
        @SuppressWarnings("hiding") List<?> _methodDecl_,
        @SuppressWarnings("hiding") TIdentifier _last_)
    {
        // Constructor
        setFirst(_first_);

        setMiddle(_middle_);

        setVarDecl(_varDecl_);

        setMethodDecl(_methodDecl_);

        setLast(_last_);

    }

    @Override
    public Object clone()
    {
        return new AClassDef(
            cloneNode(this._first_),
            cloneNode(this._middle_),
            cloneList(this._varDecl_),
            cloneList(this._methodDecl_),
            cloneNode(this._last_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassDef(this);
    }

    public TIdentifier getFirst()
    {
        return this._first_;
    }

    public void setFirst(TIdentifier node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public PExtends getMiddle()
    {
        return this._middle_;
    }

    public void setMiddle(PExtends node)
    {
        if(this._middle_ != null)
        {
            this._middle_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._middle_ = node;
    }

    public LinkedList<PVarDecl> getVarDecl()
    {
        return this._varDecl_;
    }

    public void setVarDecl(List<?> list)
    {
        for(PVarDecl e : this._varDecl_)
        {
            e.parent(null);
        }
        this._varDecl_.clear();

        for(Object obj_e : list)
        {
            PVarDecl e = (PVarDecl) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._varDecl_.add(e);
        }
    }

    public LinkedList<PMethodDecl> getMethodDecl()
    {
        return this._methodDecl_;
    }

    public void setMethodDecl(List<?> list)
    {
        for(PMethodDecl e : this._methodDecl_)
        {
            e.parent(null);
        }
        this._methodDecl_.clear();

        for(Object obj_e : list)
        {
            PMethodDecl e = (PMethodDecl) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._methodDecl_.add(e);
        }
    }

    public TIdentifier getLast()
    {
        return this._last_;
    }

    public void setLast(TIdentifier node)
    {
        if(this._last_ != null)
        {
            this._last_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._last_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._first_)
            + toString(this._middle_)
            + toString(this._varDecl_)
            + toString(this._methodDecl_)
            + toString(this._last_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._middle_ == child)
        {
            this._middle_ = null;
            return;
        }

        if(this._varDecl_.remove(child))
        {
            return;
        }

        if(this._methodDecl_.remove(child))
        {
            return;
        }

        if(this._last_ == child)
        {
            this._last_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._first_ == oldChild)
        {
            setFirst((TIdentifier) newChild);
            return;
        }

        if(this._middle_ == oldChild)
        {
            setMiddle((PExtends) newChild);
            return;
        }

        for(ListIterator<PVarDecl> i = this._varDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethodDecl> i = this._methodDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethodDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._last_ == oldChild)
        {
            setLast((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
